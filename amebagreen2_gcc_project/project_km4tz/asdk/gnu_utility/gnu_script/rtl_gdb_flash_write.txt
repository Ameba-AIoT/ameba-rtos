# GDB script for loading ram.bin process

source gnu_utility/gnu_script/rtl_gdb_jtag_boot_com.txt

monitor reset 0
monitor sleep 20
monitor reset 0
monitor sleep 20

#===============================================================================
#Macro define

if ($CUT_VERSION == 1)
	set $FLASHDATBUFSIZE = 0x800
else
	set $FLASHDATBUFSIZE = 0x4000
end

set $IMAGE_IMG1_BOOT = 0x001
set $IMAGE_IMG2_ALL = 0x002
set $AP_GCM_Tag = 0x003
set $NP_GCM_Tag = 0x004
#===============================================================================

#===============================================================================
#flash write function
define flash_write
	printf "flash_write FileName:0x%x \n", $arg0
	printf "flash_write FileSize:%d \n", $arg1

	set $FileName = $arg0
	set $FileSize = $arg1
	set $Loopnumber = ($FileSize / $FLASHDATBUFSIZE)
	set $TailSize = ($FileSize % $FLASHDATBUFSIZE)
	if ( $TailSize > 0)
		set $Loopnumber = $Loopnumber + 0x01
	end
	printf "Loopnumber = %d\n", $Loopnumber
	printf "TailSize = %d\n", $TailSize

	set $FILESTARTADDR = 0
	set $FLASHDATSRC = FlashDatSrc
	set FlashBlockWriteSize = $FLASHDATBUFSIZE
	set FlashNextEraseAddr = 0
	set $FILEWRITESIZE = $FLASHDATBUFSIZE

	printf "global variables\n"
	printf "FlashDatSrc:0x%x\n", $FLASHDATSRC
	printf "FlashBlockWriteSize:0x%x\n", FlashBlockWriteSize

	printf "Flash write start...\n"
	set $Loop = 0
	while  ($Loop < $Loopnumber)
		set $FILESTARTADDR = $FLASHDATBUFSIZE * $Loop
		printf "[%d]: write file 0x%x to flash 0x%x\n", $Loop, $FILESTARTADDR, FlashAddrForWrite

		if ($FileSize == $FILESTARTADDR + $TailSize)
			set FlashBlockWriteSize = $TailSize
			set $FILEWRITESIZE = $TailSize
		end

		if ($FileName == $IMAGE_IMG1_BOOT)
			restore ./image/amebagreen2_boot.bin binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FILEWRITESIZE)
		end
		if ($FileName == $IMAGE_IMG2_ALL)
    		restore ./image/amebagreen2_app.bin binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FILEWRITESIZE)
		end
		if ($FileName == $AP_GCM_Tag)
			restore ./image/ap_image2_all_en_tag.bin binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FILEWRITESIZE)
		end
		if ($FileName == $NP_GCM_Tag)
			restore ./image/np_image2_all_en_tag.bin binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FILEWRITESIZE)
		end

		c

		set $Loop = $Loop + 0x01
	end
end
#===============================================================================

#===============================================================================
#Set CPU to secure state
set $Temp = {int}(0xE000EE08)
p /x $Temp

set $Temp = ($Temp & ~(0x01 << 17))
set $Temp = ($Temp | (0x01 << 16))
p /x $Temp

set {int}(0xE000EE08) = $Temp

#===============================================================================
#Load flash download file
printf "Load flash loader.\n"
file gnu_utility/gnu_script/target_FPGA.axf
restore gnu_utility/gnu_script/flash_loader_ram_1.bin binary 0x30070020

#Set rom boot address
set {int}($SYSTEM_CTRL_BASE+$REG_LSYS_BOOT_ADDR_TZ) = 0x30070020
printf "pRamStartFun [0x%x]:0x%x\n", ($SYSTEM_CTRL_BASE+$REG_LSYS_BOOT_ADDR_TZ), {int}($SYSTEM_CTRL_BASE+$REG_LSYS_BOOT_ADDR_TZ)

#Set rom boot BIT to flash loader
set $Temp = {int}($SYSTEM_CTRL_BASE+$REG_LSYS_BOOT_CFG)
set $Temp = ($Temp & ~(0xFFFF << 16))
set $Temp = ($Temp | (0x01 << 28))
p /x $Temp

set {int}($SYSTEM_CTRL_BASE+$REG_LSYS_BOOT_CFG) = $Temp
printf "patch func0 [0x%x]:0x%x\n", ($SYSTEM_CTRL_BASE+$REG_LSYS_BOOT_CFG), {int}($SYSTEM_CTRL_BASE+$REG_LSYS_BOOT_CFG)

b gdb_floader_download.c:Gdb_Floader_Program_Start
b gdb_floader_download.c:Gdb_Floader_Program_End

set $pc = 0x00000020
set $sp = 0x30005000

c
#===============================================================================

#===============================================================================
#flash write
set $XIPBootSize =17216
set FlashAddrForWrite =0x00000
flash_write $IMAGE_IMG1_BOOT $XIPBootSize

set $FlashFileSize =44288
set FlashAddrForWrite =0x14000
flash_write $IMAGE_IMG2_ALL $FlashFileSize

set $AP_GCM_Tag_Size =2532
set FlashAddrForWrite =0x100000
flash_write $AP_GCM_Tag $AP_GCM_Tag_Size

set $NP_GCM_Tag_Size =2048
set FlashAddrForWrite =0x110000
flash_write $NP_GCM_Tag $NP_GCM_Tag_Size

#Tell flashloader complete flag
set FlashWriteComplete = 0x1
c
#===============================================================================

#===============================================================================
#dump image from flash
printf "dump for check\n"

#===============================================================================

quit
#===============================================================================
