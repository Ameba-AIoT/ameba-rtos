
#*****************************************************************************#
#                                Variable Definition                          #
#*****************************************************************************#
CONFIGDIR		= $(ABS_ROOTDIR)/../../menuconfig
MENU_CONFIG		= $(CONFIGDIR)/.config_lp
include $(MENU_CONFIG)

ifneq ($(CONFIG_TOOLCHAIN_ARM_GCC), y)
ROOTDIR		= $(ABS_ROOTDIR)
else
CURRENT_PATH	:= $(shell pwd)
ROOTDIR		:= $(shell realpath --relative-to=$(CURRENT_PATH) $(ABS_ROOTDIR))
endif

ASDK_VER=10.3.1
TOOLCHAINDIR	= /opt/rtk-toolchain

#gcc release
SRCDIR		=$(ROOTDIR)/../src
INCDIR		=$(ROOTDIR)/../inc
BASEDIR		= $(ROOTDIR)/../../..
KM0_BUILDDIR	= $(ROOTDIR)/../../project_lp
KM4_BUILDDIR	= $(ROOTDIR)/../../project_hp

TARGETDIR	=$(BASEDIR)/component/soc/amebasmart
BOOTLOADER	=$(BASEDIR)/component/soc/amebasmart/bootloader
UTILITYDIR	= $(ROOTDIR)/gnu_utility
FLASHDLDIR	= $(ROOTDIR)/flashloader
GNU_SCRIPT	= $(UTILITYDIR)/gnu_script
FLASHDLIMGDIR	= $(GNU_SCRIPT)/acut_loader
FLASHDLIMGDIR_KM4	= $(KM4_BUILDDIR)/asdk/gnu_utility/gnu_script/acut_loader


OSDIR		= $(BASEDIR)/component/os
FREERTOSDIR	= $(BASEDIR)/component/os/freertos/freertos_v10.5.1/Source/
MBEDTLSDIR	 = $(BASEDIR)/component/ssl/mbedtls-2.4.0

WIFIFWDIR	= $(BASEDIR)/component/wifi/wifi_fw

#ROM code folder
CMSISMATHLIBDIR  = $(BASEDIR)/component/soc/8711b/fwlib/test/ft_test/cmsis_math

PHERIEXAMPLE	= $(ROOTDIR)/../example/demo_peripheral
# -----------------------------------------------------------------------------
PREPENDTOOL		= $(UTILITYDIR)/prepend_header.sh
OTAPREPENDTOOL 	= $(UTILITYDIR)/prepend_ota_header.sh
LXDIALOG_CYGWIN_STATIC 	= $(UTILITYDIR)/lxdialog_prebuilt/lxdialog_cygwin_x86_static.exe
COMPILEOS		= $(shell uname -o)
COMPILEOS_CYGWIN	= $(shell uname -o | cut -c 1-6)
LINUX_OS		= GNU/Linux
HOSTCC			= cc
MAKE			= make

#*****************************************************************************#
#                              Compile Flag                                #
#*****************************************************************************#
#AmebaZ should fix following config
CONFIG_RELEASE_BUILD_RAM_ALL=y
CONFIG_IMAGE_ALL=y
CONFIG_SEPERATE_MAKEFILE=y

#*****************************************************************************#
#                              Build Directory                                #
#*****************************************************************************#

BUILD_TARGET_FOLDER     = $(ROOTDIR)/build
BUILD_TARGET_RAM_FOLDER = $(ROOTDIR)/build/ram
BUILD_TARGET_ROM_FOLDER = $(ROOTDIR)/build/rom
BUILD_TARGET_LIB_FOLDER = $(ROOTDIR)/build/lib
IMAGE_TARGET_FOLDER     = $(ROOTDIR)/image

ifeq ($(CONFIG_MP_INCLUDED),y)
BUILD_TYPE = MFG
else
BUILD_TYPE = NONE
endif
export BUILD_TYPE

ifeq ($(COMPILEOS),$(LINUX_OS))
ASDK_TOOLCHAIN = $(TOOLCHAINDIR)/asdk-$(ASDK_VER)/linux/newlib
TOOLCHAINNAME = asdk-10.3.1-linux-newlib-build-4072-x86_64.tar.bz2
TOOLCHAINURL	= https://github.com/Ameba-AIoT/ameba-toolchain/releases/download/10.3.1/asdk-10.3.1-linux-newlib-build-4072-x86_64.tar.bz2
else
ASDK_TOOLCHAIN = $(TOOLCHAINDIR)/asdk-$(ASDK_VER)/mingw32/newlib
TOOLCHAINNAME = asdk-10.3.1-mingw32-newlib-build-4072-x86_64.zip
TOOLCHAINURL	= https://github.com/Ameba-AIoT/ameba-toolchain/releases/download/10.3.1/asdk-10.3.1-mingw32-newlib-build-4072-x86_64.zip
endif

tool_dir = $(ASDK_TOOLCHAIN)/bin
TARGET_LIBAPP_FOLDER = $(ROOTDIR)/lib/application
TARGET_LIBSOC_FOLDER = $(ROOTDIR)/lib/soc

DEPS = $(patsubst %.o, %.d, $(OBJS))

#****************************************************************************#
#                             ARM TOOLS DEFINITION                           #
#****************************************************************************#
CONFIG_TOOLCHAIN_LD_GCC=y

#TOOL_PREFIX = arm-elf-eabi-
TOOL_PREFIX = arm-none-eabi-

CC = $(tool_dir)/$(TOOL_PREFIX)gcc
AS = $(tool_dir)/$(TOOL_PREFIX)as
AR = $(tool_dir)/$(TOOL_PREFIX)ar
#LD = $(tool_dir)/$(TOOL_PREFIX)ld
LD = $(tool_dir)/$(TOOL_PREFIX)gcc
LD_ROM = $(tool_dir)/$(TOOL_PREFIX)ld

CC_SIZE = $(tool_dir)/$(TOOL_PREFIX)size
OBJDUMP = $(tool_dir)/$(TOOL_PREFIX)objdump
FROMELF = $(tool_dir)/$(TOOL_PREFIX)objcopy
STRIP   = $(tool_dir)/$(TOOL_PREFIX)strip
NM	= $(tool_dir)/$(TOOL_PREFIX)nm

#GDB = $(tool_dir)/asdk-elf-gdb
#READELF =  $(tool_dir)/asdk-elf-readelf
GDB = $(tool_dir)/arm-none-eabi-gdb
READELF = $(tool_dir)/arm-none-eabi-readelf

REMOVE    = -rm -f
REMOVEDIR = rm -rf
MKDIR     = mkdir
MAKE      = make
CD        = cd
COPY      = cp
MOVE      = mv


#*****************************************************************************#
#                              Include Directories
#*****************************************************************************#

IFLAGS               = -I.
IFLAGS               += -I$(OSDIR)/
IFLAGS               += -I$(OSDIR)/freertos
IFLAGS               += -I$(OSDIR)/os_wrapper/include

IFLAGS               += -I$(TARGETDIR)/cmsis/
IFLAGS               += -I$(TARGETDIR)/cmsis/device
IFLAGS               += -I$(TARGETDIR)/fwlib/include
IFLAGS               += -I$(TARGETDIR)/app/monitor/include
IFLAGS               += -I$(TARGETDIR)/app/xmodem
IFLAGS               += -I$(TARGETDIR)/swlib
IFLAGS               += -I$(TARGETDIR)/misc
IFLAGS               += -I$(TARGETDIR)/hal/include
IFLAGS               += -I$(TARGETDIR)/hal/src
IFLAGS               += -I$(TARGETDIR)/usrcfg/include

IFLAGS               += -I$(INCDIR)
IFLAGS               += -I$(BASEDIR)/component/stdlib
IFLAGS               += -I$(BASEDIR)/component/wifi/api
IFLAGS               += -I$(BASEDIR)/component/example

#WIFI
IFLAGS               += -I$(BASEDIR)/component/wifi/driver/core
IFLAGS               += -I$(BASEDIR)/component/wifi/driver/core_rom
IFLAGS               += -I$(BASEDIR)/component/wifi/wifi_reg/rtl8730e
IFLAGS               += -I$(BASEDIR)/component/wifi/wifi_reg/common
IFLAGS               += -I$(BASEDIR)/component/wifi/driver/include
IFLAGS               += -I$(BASEDIR)/component/wifi/driver
IFLAGS               += -I$(BASEDIR)/component/wifi/driver/halmac
IFLAGS               += -I$(BASEDIR)/component/wifi/driver/halcommon
IFLAGS               += -I$(BASEDIR)/component/wifi/driver/halbtc
IFLAGS               += -I$(BASEDIR)/component/network
# apply old atcmd, which should be deleted after new version is ready
ifneq ($(CONFIG_NEW_ATCMD),y)
IFLAGS               += -I$(BASEDIR)/component/at_cmd/old
else
IFLAGS               += -I$(BASEDIR)/component/at_cmd
endif
IFLAGS               += -I$(BASEDIR)/component/wifi/wpa_supplicant/src
IFLAGS               += -I$(BASEDIR)/component/os_dep
IFLAGS               += -I$(WIFIFWDIR)/amebasmart/include
IFLAGS               += -I$(WIFIFWDIR)/common

#INIC
IFLAGS               += -I$(BASEDIR)/component/wifi/inic
IFLAGS               += -I$(BASEDIR)/component/wifi/inic/ipc

#SSL
IFLAGS               += -I$(BASEDIR)/component/ssl/ssl_ram_map/rom

#MBEDTLS
IFLAGS               += -I$(BASEDIR)/component/ssl/mbedtls-2.16.9/include
IFLAGS               += -I$(BASEDIR)/component/ssl/mbedtls_ram_map/rom

#apple
IFLAGS               += -I$(BASEDIR)/component/application/apple/WACServer/External/Curve25519 \
			-I$(BASEDIR)/component/application/apple/WACServer/External/GladmanAES \
			-I$(BASEDIR)/component/application/apple/homekit/crypto/chacha \
			-I$(BASEDIR)/component/application/apple/homekit/crypto/poly1305 \
			-I$(BASEDIR)/component/application/apple/homekit/crypto/ed25519 \
			-I$(BASEDIR)/component/application/apple/homekit/crypto/ed25519/core \
			-I$(BASEDIR)/component/application/apple/homekit/crypto/sha512

#IFLAGS               += -I$(BASEDIR)/component/soc/amebasmart/sboot/Curve25519 \
			-I$(BASEDIR)/component/soc/amebasmart/sboot/ed25519 \
			-I$(BASEDIR)/component/soc/amebasmart/sboot/sha512
#*****************************************************************************#
#                             ARM ASSEMBLER FLAGS
#*****************************************************************************#
ASM_FLAGS = -g -march=armv8-m.base -mthumb -c
ASM_FLAGS += -MMD -MP
ASM_FLAGS += $(IFLAGS)
ifeq ($(CONFIG_TOOLCHAIN_ARM_GCC), y)
ASM_FLAGS += $(MODULE_IFLAGS)
endif


#*****************************************************************************#
#                           ARM COMPILATION FLAGS
#*****************************************************************************#
GLOBAL_CFLAGS += -O2 -g 
#avoid compile optimize based on undefined behavior
GLOBAL_CFLAGS += -fno-strict-aliasing -fno-strict-overflow -fno-delete-null-pointer-checks
#GLOBAL_CFLAGS += -specs nosys.specs 
GLOBAL_CFLAGS += -march=armv8-m.base 
GLOBAL_CFLAGS += -mthumb 
GLOBAL_CFLAGS += -save-temps

GLOBAL_CFLAGS += -D__ARM_FEATURE_DSP=0

GLOBAL_CFLAGS += -gdwarf-3
GLOBAL_CFLAGS += -fstack-usage
GLOBAL_CFLAGS += -fdata-sections
GLOBAL_CFLAGS += -ffunction-sections
GLOBAL_CFLAGS += -nostartfiles
GLOBAL_CFLAGS += -nostdlib
GLOBAL_CFLAGS += -fno-builtin-printf
GLOBAL_CFLAGS += -Wall
GLOBAL_CFLAGS += -Wpointer-arith
GLOBAL_CFLAGS += -Wstrict-prototypes
GLOBAL_CFLAGS += -Wundef
GLOBAL_CFLAGS += -Wno-write-strings
GLOBAL_CFLAGS += -Wno-maybe-uninitialized
GLOBAL_CFLAGS += --save-temps
GLOBAL_CFLAGS += -c
GLOBAL_CFLAGS += -MMD -MP
GLOBAL_CFLAGS += -fno-jump-tables #For link _thumb1_case_uqi issue
GLOBAL_CFLAGS += -fno-tree-loop-distribute-patterns

#When the memory length is 4 bytes, memset/memcpy will be optimized for direct 32-bit reading and writing.
#If the source address is not aligned, an error will result because the hardware does not support unaligned accesses.
GLOBAL_CFLAGS += -fno-builtin-memset
GLOBAL_CFLAGS += -fno-builtin-memcpy

#GLOBAL_CFLAGS += -fno-short-enums
GLOBAL_CFLAGS += -Wextra
#GLOBAL_CFLAGS += -Wconversion
GLOBAL_CFLAGS += $(IFLAGS)
GLOBAL_CFLAGS += -DCONFIG_PLATFORM_AMEBASMART

ifeq (${IMAGE2_CFLAGS},YES)
GLOBAL_CFLAGS += -DIMAGE2_BUILD
endif
#*****************************************************************************#
#                           ARM LD FLAGS
#*****************************************************************************#
#"LDFlags": [
#"-nostartfiles",
#"-specs nosys.specs",
#"-Wl,--gc-sections",
#"-Wl,--warn-section-align",
#"-Wl,-Map=./output/text.map",
#"-Wl,--cref",
#"-Wl,--build-id=none"
#],
#"LDFlags": [
#"-O2",
#"-march=armv8-m.base",
#"-mthumb",
#"-mcmse"
#],

LD_ARG = -L$(ASDK_TOOLCHAIN)/arm-none-eabi/lib/thumb/v8-m.base
LD_ARG += -L$(ASDK_TOOLCHAIN)/lib/gcc/arm-none-eabi/$(ASDK_VER)/thumb/v8-m.base
LD_ARG += -L$(ROOTDIR)/lib/
LD_ARG += -T$(BUILD_TARGET_FOLDER)/rlx8721d.ld

#LD_ARG += -u _printf_float -u _scanf_float
LD_ARG += -O2  
LD_ARG += -march=armv8-m.base
LD_ARG += -mthumb
#LD_ARG += -mcmse
LD_ARG += -save-temps

LD_ARG += -Wl,-wrap,memchr -Wl,-wrap,memcmp -Wl,-wrap,memcpy
LD_ARG += -Wl,-wrap,memmove -Wl,-wrap,memset

LD_ARG += -Wl,-wrap,strlen -Wl,-wrap,strcmp -Wl,-wrap,stricmp
LD_ARG += -Wl,-wrap,strupr -Wl,-wrap,strtoul

LD_ARG += -Wl,-wrap,printf
LD_ARG += -Wl,-wrap,rand

LD_ARG += -nostartfiles
LD_ARG += -specs nosys.specs
LD_ARG += -specs nano.specs
ifneq (${BUILD_TYPE},ROM)
LD_ARG += -Wl,--gc-sections
endif
#LD_ARG += -Wl,--warn-section-align
LD_ARG += -Wl,-Map=text.map
LD_ARG += -Wl,--cref
LD_ARG += -Wl,--build-id=none

LD_ARG += -Wl,--no-enum-size-warning
LD_ARG += -Wl,--warn-common -o

#ROM_LD_ARG
ROM_LD_ARG += -march=armv8-m.base
ROM_LD_ARG += -mthumb
#ROM_LD_ARG += -mcmse
ROM_LD_ARG += -Wl,-Map=rom.map
ROM_LD_ARG += -Wl,--warn-common
ROM_LD_ARG += -Wl,--no-enum-size-warning

#*****************************************************************************#
#                      RULES TO CHECK TOOLCHAIN                               #
#*****************************************************************************#
check_toolchain:
	@if [ -d $(ASDK_TOOLCHAIN) ]; then \
		echo "ToolChain Had Existed"; \
	else \
		echo "Download Toolchain And Extract To $(TOOLCHAINDIR). Only Download And Extract Once"; \
		$(MKDIR) -p $(TOOLCHAINDIR); \
		if [ -d $(TOOLCHAINDIR) ]; then \
			echo "Create Toolchain Dir $(TOOLCHAINDIR) Success"; \
		else \
			echo "Create Toolchain Dir Failed. May Not Have Permission. Please Refer To README.MD Or AN900 Chapter 1.3(Installing Toolchain)."; \
			exit 1; \
		fi; \
		if wget -P $(TOOLCHAINDIR) $(TOOLCHAINURL); then \
			echo "Download $(TOOLCHAINNAME) Success"; \
		else \
			echo "Download Failed. Please Check If The Network Connection Is Accessible Or Refer To AN900 Chapter 1.3(Installing Toolchain)."; \
			exit 1; \
		fi; \
		echo "Download End And Then Extract..."; \
		if [ $(LINUX_OS) = $(COMPILEOS) ]; then \
			tar -jxf $(TOOLCHAINDIR)/$(TOOLCHAINNAME) -C $(TOOLCHAINDIR)/; \
		else \
			unzip -q $(TOOLCHAINDIR)/$(TOOLCHAINNAME) -d $(TOOLCHAINDIR)/; \
		fi; \
		echo "INSTALL SUCCESS"; \
	fi
	# check permission
	@if [ ! -x $(UTILITYDIR)/checksum ]; then \
		chmod 777 $(UTILITYDIR)/checksum; \
	fi
	@if [ ! -x $(UTILITYDIR)/checksum.exe ]; then \
		chmod 777 $(UTILITYDIR)/checksum.exe; \
	fi
	@if [ ! -x $(UTILITYDIR)/pad.sh ]; then \
		chmod 777 $(UTILITYDIR)/pad.sh; \
	fi
	@if [ ! -x $(UTILITYDIR)/prepend_header.sh ]; then \
		chmod 777 $(UTILITYDIR)/prepend_header.sh; \
	fi
	@if [ ! -x $(UTILITYDIR)/prepend_ota_header.sh ]; then \
		chmod 777 $(UTILITYDIR)/prepend_ota_header.sh; \
	fi
	@if [ ! "$(shell which python)" ]; then \
		echo "Command python not found"; \
		echo "Please refer to AN900 Chapter 1.2(Preparing GCC Environment) install python3. If still error appears, please run: sudo ln -s /usr/bin/python3 /usr/bin/python"; \
		exit 1; \
	fi 

#*****************************************************************************#
#              COPYING OBJECT FILES TO THE BUILD DIRECTORY                    #
#*****************************************************************************#

COPY_RAM_OBJS:
	@for i in  $(OBJS) $(ASM_OBJS); do \
		echo $$i >> $(ROOTDIR)/obj_list.txt;\
		 $(COPY)  $$i $(BUILD_TARGET_RAM_FOLDER) -f;\
		done \
#*****************************************************************************#
#                  FUNCTION TO ENTER SUBDIR OBJECT                            #
#*****************************************************************************#
define GenerateTargets
.PHONY: $(1)-$(2)
$(1)-$(2):
	+$(MAKE) -C $(1) $(2)
endef

#*****************************************************************************#
#              CLEAN OBJECT FILES FOR MAKE CLEAN                    	      #
#*****************************************************************************#
CLEAN_OBJS:
	$(Q)$(REMOVE) $(OBJS)
	$(Q)$(REMOVE) $(OBJS:.o=.d)
	$(Q)$(REMOVE) $(OBJS:.o=.i)
	$(Q)$(REMOVE) $(OBJS:.o=.s)
	$(Q)$(REMOVE) $(OBJS:.o=.su)

define CLEAN_FUNC
	-$(Q) $(REMOVE) -rf *.o
	-$(Q) $(REMOVE) -rf *.i
	-$(Q) $(REMOVE) -rf *.ii
	-$(Q) $(REMOVE) -rf *.s
	-$(Q) $(REMOVE) -rf *.su
	-$(Q) $(REMOVE) -rf *.d
endef

define CLEAN_BY_SEARCH_FUNC
	-$(Q) find $(1) -name "*.o" -delete
	-$(Q) find $(1) -name "*.i" -delete
	-$(Q) find $(1) -name "*.ii" -delete
	-$(Q) find $(1) -name "*.s" -delete
	-$(Q) find $(1) -name "*.su" -delete
	-$(Q) find $(1) -name "*.d" -delete
endef

define GEN_AND_MOVE_TO_LIB_FOLDER
	$(AR) rvs $(1).a $(OBJS) $(ASM_OBJS)
	$(FROMELF) -g -D $(1).a
	$(MOVE) -f $(1).a $(2)
endef

#*****************************************************************************#
#              COPYING OBJECT FILES TO THE BUILD APPL DIRECTORY               #
#*****************************************************************************#

COPY_ROM_OBJS:
	@echo "=============================================================" \
	       >> $(ROOTDIR)/rom_size.txt;\
	$(CC_SIZE) -G -t $(OBJS) $(ASM_OBJS) >> $(ROOTDIR)/rom_size.txt;\
	for i in  $(OBJS) $(ASM_OBJS); do \
		 $(COPY)  $$i $(BUILD_TARGET_ROM_FOLDER) -f;\
		done \

#	@-$(COPY) *.o $(BUILD_TARGET_ROM_FOLDER) -f
#	$(REMOVE) *.o


#*****************************************************************************#
#              RENAME OBJECT FILES SECTION                                    #
#*****************************************************************************#
RENAME_ROM_OBJS:
	@OBJ_LIST=$(ls *.o)
	@for obj_file in $(OBJS) $(ASM_OBJS); do \
		$(FROMELF) --rename-section .rodata.str1.4=.rom.rodata.str1.4 $$obj_file $$obj_file; \
                $(FROMELF) --rename-section .rodata.str1.1=.rom.rodata.str1.1 $$obj_file $$obj_file; \
                $(FROMELF) --rename-section .rodata=.rom.rodata $$obj_file $$obj_file; \
	done \

RENAME_LOADER_OBJS:
	@OBJ_LIST=$(ls *.o)
	@for obj_file in $(OBJS) $(ASM_OBJS); do \
		$(FROMELF) --rename-section .rodata.str1.4=.boot.rodata.str1.4 $$obj_file $$obj_file; \
	done \

#*****************************************************************************#
#                  FUNCTION TO GENERATE GIT VERSION                           #
#*****************************************************************************#
define GEN_GIT_VER
	@if [ -x "$(shell which git)" ]; \
	then \
		echo \#include \"section_config.h\" > .git_ver; \
		echo GIT_VER_TABLE_SECTION >> .git_ver; \
		echo const char $(1)_git_rev[] = \"$(1)_ver_`git rev-parse --short HEAD`_`date +%Y/%m/%d-%T`\"\; >> .git_ver; \
	else \
		echo  > .git_ver; \
	fi
	mv -f .git_ver $(1)_git_version.c
endef

#*****************************************************************************#
#              RULES TO GENERATE OBJECT FILE FROM .C FILE                     #
#*****************************************************************************#

%.o:%.c
	$(ECHO) "  CC      $<"
	$(Q)$(CC) $(GLOBAL_CFLAGS) $(MODULE_IFLAGS) $<  -o $@


#*****************************************************************************#
#              RULES TO GENERATE OBJECT FILE FROM .S FILE                     #
#*****************************************************************************#

%.o:%.S
	$(ECHO) "  AS      $<"
	$(Q)$(CC) $(ASM_FLAGS) $< -o $@
