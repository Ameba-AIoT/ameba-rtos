# GDB script for loading ram.bin process

source gnu_utility/gnu_script/rtl_gdb_jtag_boot_com.txt

monitor reset 0
monitor sleep 20
monitor reset 0
monitor sleep 20

#===============================================================================
#Macro define

if ($CUT_VERSION == 1)
	set $FLASHDATBUFSIZE = 0x800
else
	set $FLASHDATBUFSIZE = 0x4000
end

set $IMAGE_KM4_BOOT = 0x001
set $IMAGE_IMG2_ALL = 0x002
set $IMAGE_KM4_IMG3 = 0x003
set $IMAGE_CA32_IMG_ALL = 0x005
set $IMAGE_CA32_DTB = 0x007
set $IMAGE_CA32_UIMAGE = 0x008
set $CA32_FILE_SQ	= 0x009
set $CA32_FILE_JF	= 0x00a

#===============================================================================

#===============================================================================
#Load flash download file
printf "Load flash loader.\n"
file gnu_utility/gnu_script/target_FPGA.axf
#Load the file
#lo
#restore ./image/rom.bin binary 0x0
restore gnu_utility/gnu_script/flash_loader_ram_1.bin binary 0x30003020
#===============================================================================


#===============================================================================
#flash write function
define flash_write
	printf "flash_write FileName:%x \n", $arg0
	printf "flash_write FileSize:%d \n", $arg1
	printf "flash_write FlashAddrForWrite:%x \n", FlashAddrForWrite

	set $FileName = $arg0
	set $FileSize = $arg1
	set $Loopnumber = ($FileSize / $FLASHDATBUFSIZE)
	set $TailSize = ($FileSize % $FLASHDATBUFSIZE)
	if ( $TailSize > 0)
		set $Loopnumber = $Loopnumber + 0x01
	end
	printf "FileSize: %x\n",$FileSize
	printf "Loopnumber = %d\n", $Loopnumber
	printf "TailSize = %d\n", $TailSize
	printf "global variables\n"

	set $FILESTARTADDR = 0
	set $FLASHDATSRC = FlashDatSrc
	set FlashBlockWriteSize = $FLASHDATBUFSIZE
	set $FILEWRITESIZE = $FLASHDATBUFSIZE

	printf "FlashDatSrc:%x\n", $FLASHDATSRC
	printf "FlashBlockWriteSize:%x\n", FlashBlockWriteSize
	printf "FlashAddrForWrite:%x\n", FlashAddrForWrite

	printf  "Flash write start...\n"
	set $Loop = 0
	while  ($Loop < $Loopnumber)
    	set $FILESTARTADDR = $FLASHDATBUFSIZE * $Loop
    	printf "FILESTARTADDR"
    	p /x $FILESTARTADDR
    	p /x FlashAddrForWrite
    	p /x $Loop

		if ($FileSize == $FILESTARTADDR + $TailSize)
			set FlashBlockWriteSize = $TailSize
			set $FILEWRITESIZE = $TailSize
		end

		if ($FileName == $IMAGE_IMG2_ALL)
    		restore ./image/km0_km4_ca32_app.bin binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FILEWRITESIZE)
		end
		if ($FileName == $IMAGE_KM4_BOOT)
			restore ./image/km4_boot_all.bin binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FILEWRITESIZE)
		end
		if ($FileName == $IMAGE_KM4_IMG3)
			restore ./image/km4_image3_all.bin binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FILEWRITESIZE)
		end
		if ($FileName == $IMAGE_CA32_IMG_ALL)
			restore ../../project_ap/asdk/image/ap_image_all.bin binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FLASHDATBUFSIZE)
		end
		
		if ($FileName == $IMAGE_CA32_DTB)
			restore ../../project_ap/asdk/image/cortex-a53.dtb binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FLASHDATBUFSIZE)
		end
		
		if ($FileName == $IMAGE_CA32_UIMAGE)
			restore ../../project_ap/asdk/image/uImage binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FLASHDATBUFSIZE)
		end
		
		if ($FileName == $CA32_FILE_SQ)
			restore ../../project_ap/asdk/image/initsquashfs.bin  binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FLASHDATBUFSIZE)
		end
    	
		if ($FileName == $CA32_FILE_JF)
			restore ../../project_ap/asdk/image/jffs2.img  binary ($FLASHDATSRC-$FILESTARTADDR) $FILESTARTADDR ($FILESTARTADDR + $FLASHDATBUFSIZE)
		end
		c

		#check Spinad Program result...
		printf "FlashWriteResult:%x \n", FlashWriteResult
		if(FlashWriteResult == 0)
			#Write Fail, jump a 128K block
			set $Loop = $Loop & 0xFFFFFFC0
			set FlashAddrForWrite =FlashAddrForWrite & 0xFFFE0000
			set FlashAddrForWrite =FlashAddrForWrite + 0x20000
		else
			set $Loop = $Loop + 0x01
		end
	end
end

#===============================================================================
#Set rom boot BIT to flash loader
set $Temp = 0x0
set $Temp = {int}($PERI_ON_BASE+$REG_BOOT_CFG)
p /x $Temp

set $Temp = ($Temp & ~(0xFFFF << 16))
set $Temp = ($Temp | (0x01 << 28))
p /x $Temp

set {int}($PERI_ON_BASE+$REG_BOOT_CFG) = $Temp
printf "....\n"
printf "wakeup bit(%x):%x\n", ($PERI_ON_BASE+$REG_BOOT_CFG), {int}($PERI_ON_BASE+$REG_BOOT_CFG)

#===============================================================================
#Set CPU to secure state
set $Temp = {int}(0xE000EE08)
p /x $Temp

set $Temp = ($Temp & ~(0x01 << 17))
set $Temp = ($Temp | (0x01 << 16))
p /x $Temp

set {int}(0xE000EE08) = $Temp

b rtl_flash_download.c:89
b rtl_flash_download.c:131

set $pc = 0x9900
set $sp = 0x30002FFC

c
#=============================================================================== 

#=============================================================================== 
#flash write
set $XIPBootSize =40864
set FlashAddrForWrite =0x00000
flash_write $IMAGE_KM4_BOOT $XIPBootSize

set $FlashFileSize =744224
set FlashAddrForWrite =0x20000
flash_write $IMAGE_IMG2_ALL $FlashFileSize

# set $Img3FileSize =0
# set FlashAddrForWrite =0x1E0000
# flash_write $IMAGE_KM4_IMG3 $Img3FileSize

set $APIMGFileSize =0
set FlashAddrForWrite =0x200000
flash_write $IMAGE_CA32_IMG_ALL $APIMGFileSize

set $DTBFileSize =0
set FlashAddrForWrite =0x3E0000
flash_write $IMAGE_CA32_DTB $DTBFileSize

set $UIMAGEFileSize =0
set FlashAddrForWrite =0x400000
flash_write $IMAGE_CA32_UIMAGE $UIMAGEFileSize

set $CA32_FILE_SQ_SIZE =0
set FlashAddrForWrite =0x800000
flash_write $CA32_FILE_SQ $CA32_FILE_SQ_SIZE

set $CA32_FILE_JF_SIZE =0
set FlashAddrForWrite =0xC00000
flash_write $CA32_FILE_JF $CA32_FILE_JF_SIZE

#Tell flashloader complete flag
set FlashWriteComplete = 0x1
c
#=============================================================================== 

#=============================================================================== 
#dump image from flash
printf "dump for check\n"


#=============================================================================== 

quit
#===============================================================================

