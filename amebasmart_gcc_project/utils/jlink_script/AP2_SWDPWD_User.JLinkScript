/*********************************************************************
*                    SEGGER Microcontroller GmbH                     *
*        Solutions for real time microcontroller applications        *
**********************************************************************
*                                                                    *
*            (c) 1995 - 2018 SEGGER Microcontroller GmbH             *
*                                                                    *
* Internet: www.segger.com Support: support@segger.com               *
*                                                                    *
**********************************************************************
----------------------------------------------------------------------
Purpose : 
---------------------------END-OF-HEADER------------------------------
*/

U32 PASSWORD_0 = 0x31323334;
U32 PASSWORD_1 = 0x21222324;
U32 PASSWORD_2 = 0x11121314;
U32 PASSWORD_3 = 0x01020304;

/*********************************************************************
*
*       ConfigTargetSettings
*/
int ConfigTargetSettings(void) {
	CORESIGHT_AHBAPCSWDefaultSettings = 0x03000002; // default secure if SPIDEN = 1
	//CORESIGHT_AHBAPCSWDefaultSettings = 0x43000002; // default nonsecure if SPIDEN = 0
}

/*********************************************************************
*
*       SetupTarget
*/
void SetupTarget(void) {
	Report("*******************************************************");
	Report("J-Link script: SetupTarget()");
	Report("*******************************************************");
	//MEM_WriteU32(0xE6151010, 0x00000002);
	//MEM_WriteU32(0xE6160044, 0x5A5A0003);
}

/*********************************************************************
*
*       SWDPWD_Read_ID
*/
void SWDPWD_READ_ID(void) {
	int tmp;
	Report("J-Link script: SWD_READ_ID");

	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x0020);
	tmp=JLINK_CORESIGHT_ReadAP(JLINK_CORESIGHT_AP_REG_DATA);
	Report1("SWD ID:",tmp);
}

/*********************************************************************
*
*       SWDPWD_Password_Write
*/
void SWDPWD_Password_Write(void) {
	Report("J-Link script: SWDPWD_Password_Write()");

	//  SWDPWD write right
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x0004); // target address of PASSWORD
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, PASSWORD_0);
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x0008); // target address of PASSWORD
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, PASSWORD_1);
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x000C); // target address of PASSWORD
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, PASSWORD_2);
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x0010); // target address of PASSWORD
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, PASSWORD_3);
}

/*********************************************************************
*
*       SWDPWD_Compare_Enable
*/
int SWDPWD_Compare_Enable(void) {
	int tmp;

	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x0000);	// PASSWORD compare enable
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, (1<<1));

	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x0000);
	tmp=JLINK_CORESIGHT_ReadAP(JLINK_CORESIGHT_AP_REG_DATA);		//automatically read twice, user will always see valid data.
	Report1("ctrl register value:",tmp);
  
	while(tmp&(1<<1)){
		Report("Waiting HW Loading and Compare...");
		JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x0000);
		tmp=JLINK_CORESIGHT_ReadAP(JLINK_CORESIGHT_AP_REG_DATA);
	}

	if (tmp&(1<<3)) {
		Report("SWD Password right!");
		return 0;
	} else {
		Report("SWD Password wrong!");
		
		/* try to set ctrl reg RO bit3 */
		JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x0000);
		JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_DATA, (1<<3));

		JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0x0000);
		tmp=JLINK_CORESIGHT_ReadAP(JLINK_CORESIGHT_AP_REG_DATA);
		if (tmp&(1<<3)) {
			Report1("ctrl register value:",tmp);
			Report("--------------compare result is changed, error!!!--------------");
		}
	}
  
	if (tmp&(1<<4)){
		Report("SWD Password locked!");
		
		return 2;
	}
	return 1;
}

/*********************************************************************
*
*       ResetTarget
*/
void ResetTarget(void) {
	int v;
	int Speed;
	int Ctrl;
	int result;

	Report("*******************************************************");
	Report("J-Link script: ResetTarget()");
	Report("*******************************************************");
	Speed = JTAG_Speed;
	JTAG_Speed = 3000;
	JTAG_WriteClocks(1);

	//
	// Select CTRL_AP(AHB-AP, AP2) and set authentication interface
	//
	// Set SYSPWRUPREQ and DBGPWRUPREQ and clear STICKYORUN
	// JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_CTRL_STAT, (1 << 30) | (1 << 28) | (1 << 1));
	JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_SELECT, (2 << 24) | (0 << 4));	// Select AP[2], bank 0
	Ctrl = 0x23800052; // AHB-AP.CSW  //NO PWD compare enable
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_CTRL, Ctrl);

	Report("****************** SWD ID ******************");
	SWDPWD_READ_ID();

	Report("****************** SWDPWD_Password_Write ******************");
	SWDPWD_Password_Write();
	result = 1;
	result = SWDPWD_Compare_Enable();

	if (result != 0) {
		Report("NOTE: Wrong Password, please reset PASSWORD_0/1/2/3 and try again");
		if (result == 2) {
			Report("WARNNING: Wrong Password tried 4 times, SWDPWD locked! please reset PASSWORD_0/1/2/3 and try again");
			Report("WARNNING: please reset the system and input new password to PASSWORD_0/1/2/3 and try again!");
		}
		return 1;
	}
	
	// Change AP selection to KM4 CPU AP(AP[1]) to check connection
	// Control KM4(AHB-AP, AP1)
	JLINK_CORESIGHT_WriteDP(JLINK_CORESIGHT_DP_REG_SELECT, (1 << 24) | (0 << 4));  // Select AP[1], bank 0
	Ctrl = 0x23800052; // AHB-AP.CSW
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_CTRL, Ctrl);
	JLINK_CORESIGHT_WriteAP(JLINK_CORESIGHT_AP_REG_ADDR, 0xE000ED00);
	v = JLINK_CORESIGHT_ReadAP(JLINK_CORESIGHT_AP_REG_DATA);
	Report1("CPUID is: ",v);
	if(v == 0xFFFFFFFF) {
		Report("ERROR: Right Password Shall Access CPUID!");
	}

}

/*********************************************************************
*
*       InitTarget
*
*  Notes
*    (1) High-level functions like MEM_xxx functions must not be used here.
*        They may only be used in SetupTarget() which is called later in the connect process.
*/
void InitTarget(void) {
	Report("*******************************************************");
	Report("J-Link script: AmebaSmart KM4(Cortex-M33 CPU) J-Link script");
	Report("*******************************************************");

	// Manually configured AP map
	CORESIGHT_AddAP(0, CORESIGHT_AHB_AP);
	CORESIGHT_AddAP(1, CORESIGHT_AHB_AP);
	CORESIGHT_AddAP(2, CORESIGHT_AHB_AP);
	CORESIGHT_AddAP(3, CORESIGHT_APB_AP);

	CORESIGHT_IndexAHBAPToUse = 1;	// <= where the target CPU locates
	JTAG_WriteClocks(1);			// Make sure that JTAG buffers are empty
	JTAG_Speed = 1000;
	ResetTarget();					// Reset and Halt Core
}
