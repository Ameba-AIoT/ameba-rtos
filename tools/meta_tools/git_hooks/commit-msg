#!/bin/sh

# Description: 
#     This hook script derives from Gerrit Code Review 2.15.18-3-g71dfa727e3,
#     and it is for Gerrit Code Review (https://www.gerritcodereview.com/)
#
#     Copyright (C) 2009 The Android Open Source Project
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#
# Usage: 
#     Add this file to your project's .git/hooks directory, rename it to just 'commit-msg'.
#
# Change Log:


unset GREP_OPTIONS

CHANGE_ID_AFTER="Bug|Depends-On|Issue|Test|Feature|Fixes|Fixed"
MSG="$1"

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# Check for, and add if missing, a unique Change-Id
#
add_ChangeId() {
	clean_message=`sed -e '
		/^diff --git .*/{
			s///
			q
		}
		/^Signed-off-by:/d
		/^#/d
	' "$MSG" | git stripspace`
	if test -z "$clean_message"
	then
		return
	fi

	# Do not add Change-Id to temp commits
	if echo "$clean_message" | head -1 | grep -q '^\(fixup\|squash\)!'
	then
		return
	fi

	if test "false" = "`git config --bool --get gerrit.createChangeId`"
	then
		return
	fi

	# Does Change-Id: already exist? if so, exit (no change).
	if grep -i '^Change-Id:' "$MSG" >/dev/null
	then
		return
	fi

	id=`_gen_ChangeId`
	T="$MSG.tmp.$$"
	AWK=awk
	if [ -x /usr/xpg4/bin/awk ]; then
		# Solaris AWK is just too broken
		AWK=/usr/xpg4/bin/awk
	fi

	# Get core.commentChar from git config or use default symbol
	commentChar=`git config --get core.commentChar`
	commentChar=${commentChar:-#}

	# How this works:
	# - parse the commit message as (textLine+ blankLine*)*
	# - assume textLine+ to be a footer until proven otherwise
	# - exception: the first block is not footer (as it is the title)
	# - read textLine+ into a variable
	# - then count blankLines
	# - once the next textLine appears, print textLine+ blankLine* as these
	#   aren't footer
	# - in END, the last textLine+ block is available for footer parsing
	$AWK '
	BEGIN {
		if (match(ENVIRON["OS"], "Windows")) {
			RS="\r?\n" # Required on recent Cygwin
		}
		# while we start with the assumption that textLine+
		# is a footer, the first block is not.
		isFooter = 0
		footerComment = 0
		blankLines = 0
	}

	# Skip lines starting with commentChar without any spaces before it.
	/^'"$commentChar"'/ { next }

	# Skip the line starting with the diff command and everything after it,
	# up to the end of the file, assuming it is only patch data.
	# If more than one line before the diff was empty, strip all but one.
	/^diff --git / {
		blankLines = 0
		while (getline) { }
		next
	}

	# Count blank lines outside footer comments
	/^$/ && (footerComment == 0) {
		blankLines++
		next
	}

	# Catch footer comment
	/^\[[a-zA-Z0-9-]+:/ && (isFooter == 1) {
		footerComment = 1
	}

	/]$/ && (footerComment == 1) {
		footerComment = 2
	}

	# We have a non-blank line after blank lines. Handle this.
	(blankLines > 0) {
		print lines
		for (i = 0; i < blankLines; i++) {
			print ""
		}

		lines = ""
		blankLines = 0
		isFooter = 1
		footerComment = 0
	}

	# Detect that the current block is not the footer
	(footerComment == 0) && (!/^\[?[a-zA-Z0-9-]+:/ || /^[a-zA-Z0-9-]+:\/\//) {
		isFooter = 0
	}

	{
		# We need this information about the current last comment line
		if (footerComment == 2) {
			footerComment = 0
		}
		if (lines != "") {
			lines = lines "\n";
		}
		lines = lines $0
	}

	# Footer handling:
	# If the last block is considered a footer, splice in the Change-Id at the
	# right place.
	# Look for the right place to inject Change-Id by considering
	# CHANGE_ID_AFTER. Keys listed in it (case insensitive) come first,
	# then Change-Id, then everything else (eg. Signed-off-by:).
	#
	# Otherwise just print the last block, a new line and the Change-Id as a
	# block of its own.
	END {
		unprinted = 1
		if (isFooter == 0) {
			print lines "\n"
			lines = ""
		}
		changeIdAfter = "^(" tolower("'"$CHANGE_ID_AFTER"'") "):"
		numlines = split(lines, footer, "\n")
		for (line = 1; line <= numlines; line++) {
			if (unprinted && match(tolower(footer[line]), changeIdAfter) != 1) {
				unprinted = 0
				print "Change-Id: I'"$id"'"
			}
			print footer[line]
		}
		if (unprinted) {
			print "Change-Id: I'"$id"'"
		}
	}' "$MSG" > "$T" && mv "$T" "$MSG" || rm -f "$T"
}
_gen_ChangeIdInput() {
	echo "tree `git write-tree`"
	if parent=`git rev-parse "HEAD^0" 2>/dev/null`
	then
		echo "parent $parent"
	fi
	echo "author `git var GIT_AUTHOR_IDENT`"
	echo "committer `git var GIT_COMMITTER_IDENT`"
	echo
	printf '%s' "$clean_message"
}
_gen_ChangeId() {
	_gen_ChangeIdInput |
	git hash-object -t commit --stdin
}

add_HookVersion(){
	changeid=$(grep -F "Change-Id" "$MSG")
	echo "$changeid"
	if grep -Fq "Hook-Version" "$MSG"
	then
		echo "Hook version existed"
	else
		if [ ! -z "$changeid" ]
		then
			echo "remove change-id"
			sed '/Change-Id/d' "$MSG" > "$MSG".tmp
		else
			cp "$MSG" "$MSG".tmp
		fi
		
		cur_path=$PWD
		repo_url=`git remote -v | cut -f 2 | cut -d' ' -f 1 | head -n 1`
		repo_name=`basename $repo_url`
		if [ "$repo_name" = "manifest" ]; then
			repo_root_dir="${cur_path//\\/\/}/../../"
		else
			proj_name=${repo_url#*29418/}
			cur_dir=`repo list | grep $proj_name | head -n 1 | cut -d':' -f 1`
			raw_repo_root_dir=${cur_path%${cur_dir%% }}
			repo_root_dir=${raw_repo_root_dir//\\/\/}
		fi


		active_hook_dir=$repo_root_dir/.repo/repo/hooks

		if [ ! -e "$active_hook_dir" ] || [ ! -e "$active_hook_dir/pre-commit" ]; then
			echo "Repo damaged, please back up the changes and run 'repo sync' at repo root directory"
			exit 1
		fi

		version=$(sed -n '3p' < $active_hook_dir/pre-commit | cut -c 3-)
		
		if [ ! -z "$changeid" ]
		then
			echo "append hook-version and change-id"
			printf '\nHook-%s\n----------\n\n%s' "$version" "$changeid" >> "$MSG".tmp
		else
			echo "append hook-version"
			printf '\nHook-%s\n----------' "$version" >> "$MSG".tmp
		fi
		rm -f "$MSG"
		mv "$MSG".tmp "$MSG"
		rm -f "$MSG".tmp
	fi

}

check_MessageFormat() {
	merge_commit_msg1=$(cat "$MSG" | grep "^Merge branch '.*' of ")
	merge_commit_msg2=$(cat "$MSG" | grep "^# It looks like you may be committing a merge")
	merge_commit_msg3=$(cat "$MSG" | grep "^# Please enter a commit message to explain why this merge is necessary")
	if [ "X$merge_commit_msg1" != "X" ] || [ "X$merge_commit_msg2" != "X" ] || [ "X$merge_commit_msg3" != "X" ]
	then
		echo "Merge commit is not allowed, please execute 'git config --global pull.rebase true' to enable rebase pull."
		return 1
	fi
	
    sed -e '
		/^diff --git .*/{
			s///
			q
		}
		/^Signed-off-by:/d
		/^#/d
	' "$MSG" | git stripspace > .tmp_msg
	
	i=0
	while read line
	do
		lines[i]=$line
		((i++))
	done < .tmp_msg
	
	rm -f .tmp_msg > /dev/null 2>&1
	
	if [ ${#lines[@]} -lt 3 ]
	then
		echo "Commit message invalid: too short, non-empty lines must >= 3"
		return 1
	fi
	
	# 1st line, message title format must be [ic_name][module1:submodule1][module2:submodule2] 
	first_line=$(echo "${lines[0]}" | grep "^\[\w\+\]")
	if [ "X$first_line" = "X" ]
	then
		echo "Commit message invalid: no ic_name pattern in title"
		return 1
	fi
	
	# 1st line [wlan] keyword check if modify the code in the wifi directory
	git diff-index --cached $against | grep -E -q 'component/wifi'
	if [ $? -eq 0 ]; then
		wlan_format=`echo "$first_line" | grep -E -i '\[wlan.*\]'`
		if [ -z "$wlan_format" ]; then
			echo "Invalid commit message: there must be [wlan] keyword in title for WiFi changes"
			return 1
		fi
	fi

	# 2nd line must be empty line
	if [ "X${lines[1]}" != "X" ]
	then
		echo "Commit message invalid: second line is not empty"
		return 1
	fi
	
	# 3rd to nth lines should be start with *,-,+ until empty line
	change_lines=0
	for(( i=2;i<${#lines[@]};i++))
	do
		item=${lines[i]}
		if [ "X$item" = "X" ]
		then
			break
		fi
		first_char=${item:0:1}
		if [ "$first_char" != "*" ] && [ "$first_char" != "+" ] && [ "$first_char" != "-" ]
		then
			echo "Commit message invalid: invalid start char '$first_char' in change line '$item'"
			return 1
		else
			len=${#item}
			if [ $len -lt 3 ]
			then
				echo "Commit message invalid: too few charactors in change line '$item'"
				return 1
			fi
			second_char=${item:1:1}
			if [ "$second_char" != " " ]
			then
				echo "Commit message invalid: second char in change line '$item' should be space"
				return 1
			fi
			third_char=${item:2:1}
			if [ "$third_char" = " " ]
			then
				echo "Commit message invalid: too many spaces after start char in change line '$item'"
				return 1
			fi
			change_lines=$[change_list_lines+1]
		fi
	done
	
	last_line=$i
	
	if [ $change_lines -eq 0 ]
	then
		echo "Commit message invalid: no valid change lines"
		return 1
	fi
	
	for(( i=$last_line;i<${#lines[@]};i++))
	do
		item=${lines[i]}
		if [ "X$item" = "X" ]
		then
			continue
		fi
		first_char=${item:0:1}
		if [ "$first_char" != "*" ] && [ "$first_char" != "+" ] && [ "$first_char" != "-" ]
		then
			break
		else
			echo "Commit message invalid: change lines should not be separated with empty line(s)"
			return 1
		fi
	done
	
	echo "Commit message valid"
	return 0
}

check_MessageFormat
rc=`echo $?`
if [ $rc -eq 0 ]
then
	add_HookVersion
	add_ChangeId
fi

exit $rc
