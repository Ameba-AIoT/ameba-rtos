/*
 * Copyright (c) 2022, Arm Limited. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 */

/*
 * Generated by erpcgen 1.9.1 on Fri Dec 16 14:51:11 2022.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#if !defined(_tfm_erpc_psa_connection_api_server_h_)
#define _tfm_erpc_psa_connection_api_server_h_

#ifdef __cplusplus
#include "erpc_server.h"
#include "erpc_codec.h"
extern "C"
{
#include "tfm_erpc_psa_connection_api.h"
#include <stdint.h>
#include <stdbool.h>
}

#if 10901 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif


/*!
 * @brief Service subclass for psa_connection_api.
 */
class psa_connection_api_service : public erpc::Service
{
public:
    psa_connection_api_service() : Service(kpsa_connection_api_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(uint32_t methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
    /*! @brief Server shim for psa_connect of psa_connection_api interface. */
    erpc_status_t psa_connect_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);

    /*! @brief Server shim for psa_close of psa_connection_api interface. */
    erpc_status_t psa_close_shim(erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);
};

extern "C" {
#else
#include "tfm_erpc_psa_connection_api.h"
#endif // __cplusplus

typedef void * erpc_service_t;

erpc_service_t create_psa_connection_api_service(void);

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
void destroy_psa_connection_api_service(erpc_service_t service);
#elif ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_STATIC
void destroy_psa_connection_api_service(void);
#else
#warning "Unknown eRPC allocation policy!"
#endif

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // _tfm_erpc_psa_connection_api_server_h_
