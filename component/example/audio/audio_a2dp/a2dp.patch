diff --git a/component/bluetooth/example/bt_a2dp/CMakeLists.txt b/component/bluetooth/example/bt_a2dp/CMakeLists.txt
index 4fe434d8ff..d0c6482a0c 100644
--- a/component/bluetooth/example/bt_a2dp/CMakeLists.txt
+++ b/component/bluetooth/example/bt_a2dp/CMakeLists.txt
@@ -43,6 +43,7 @@ ameba_list_append(private_includes
 	../bt_app_audio_data
 	${c_CMPT_BLUETOOTH_DIR}/bt_audio/bt_codec/sbc/decoder/include
 	${c_CMPT_BLUETOOTH_DIR}/bt_audio/bt_codec/sbc/encoder/include
+	${c_CMPT_AUDIO_DIR}/interfaces
 )
 
 # Component private part, user config end
@@ -61,4 +62,4 @@ ameba_add_internal_library(bt_a2dp
     p_COMPILE_OPTIONS
         ${private_compile_options}
 )
-##########################################################################################
\ No newline at end of file
+##########################################################################################
diff --git a/component/bluetooth/example/bt_a2dp/a2dp.c b/component/bluetooth/example/bt_a2dp/a2dp.c
index 3716a1b347..5afeaa344e 100644
--- a/component/bluetooth/example/bt_a2dp/a2dp.c
+++ b/component/bluetooth/example/bt_a2dp/a2dp.c
@@ -26,6 +26,11 @@
 #include <dlist.h>
 #include <bt_utils.h>
 
+#include "audio/audio_service.h"
+
+bool g_a2dp_connect = false;
+bool g_a2dp_timeout = false;
+
 /* -------------------------------- Defines --------------------------------- */
 #define RTK_BT_DEV_NAME                      "RTK_BT_AUDIO_DEVICE"
 #define DEFAULT_PAGESCAN_WINDOW              0x48
@@ -49,13 +54,13 @@ static uint8_t curr_volume = RTK_BT_DEFAULT_ABSOLUTE_VOLUME;
 
 /* ---------------------------- Static Variables ---------------------------- */
 static uint8_t a2dp_demo_init_flag = 0;
-static bool app_a2dp_src_send_flag = false;
+bool app_a2dp_src_send_flag = false;
 static rtk_bt_audio_track_t *a2dp_demo_audio_track_hdl = NULL;
-static void *a2dp_demo_codec_entity = NULL;
-static uint8_t a2dp_demo_role;
-static uint8_t src_a2dp_credits = RTK_BT_A2DP_SRC_STREAM_MAX_CREDITS;
+void *a2dp_demo_codec_entity = NULL;
+uint8_t a2dp_demo_role;
+uint8_t src_a2dp_credits = RTK_BT_A2DP_SRC_STREAM_MAX_CREDITS;
 static rtk_bt_audio_codec_conf_t audio_codec_conf = {0};
-static rtk_bt_sbc_codec_t sbc_codec_t = {
+rtk_bt_sbc_codec_t sbc_codec_t = {
 	{
 		.sbc_enc_mode = (sbc_channel_mode_t)SBC_MODE_STANDARD,
 		.blocks = 16,
@@ -103,7 +108,7 @@ static struct a2dp_demo_task_t a2dp_task = {
 	.run = 0,
 };
 
-static uint8_t remote_bd_addr[6] = {0};
+uint8_t remote_bd_addr[6] = {0};
 /* ---------------------------- Auto reconnect config ---------------------------- */
 static void *reconnect_timer = NULL;
 static uint8_t a2dp_demo_auto_reconnect = 1;
@@ -844,9 +849,13 @@ static void a2dp_task_entry(void *ctx)
 	osif_sem_give(a2dp_task.sem);
 
 	while (a2dp_task.run) {
+#if 0
 		if (app_a2dp_src_send_flag) {
 			app_a2dp_src_send_data();
 		}
+#else
+       (void) app_a2dp_src_send_data;
+#endif
 		osif_delay(3);
 	}
 
@@ -1130,6 +1139,12 @@ static rtk_bt_evt_cb_ret_t br_gap_app_callback(uint8_t evt_code, void *param, ui
 		BT_LOGA("[BR GAP] ACL connection fail with %02x:%02x:%02x:%02x:%02x:%02x, cause is 0x%x \r\n",
 				p_fail_rsp->bd_addr[5], p_fail_rsp->bd_addr[4], p_fail_rsp->bd_addr[3], p_fail_rsp->bd_addr[2], p_fail_rsp->bd_addr[1], p_fail_rsp->bd_addr[0],
 				p_fail_rsp->cause);
+		if (p_fail_rsp->cause == 0x104) {
+			BT_LOGA("[BR GAP] ACL connection timeout");
+			if(a2dp_demo_role == RTK_BT_A2DP_ROLE_SRC) {
+			    g_a2dp_timeout = true;
+			}
+		}
 		break;
 	}
 
@@ -1202,6 +1217,12 @@ static rtk_bt_evt_cb_ret_t br_gap_app_callback(uint8_t evt_code, void *param, ui
 		if (a2dp_demo_bond_info_flush) {
 			a2dp_demo_flush_bond_info(A2DP_DEMO_BOND_INFO_FLUSH_EVENT);
 		}
+
+        if(a2dp_demo_role == RTK_BT_A2DP_ROLE_SRC) {
+			RTAudioService_SetDeviceState(RTDEVICE_OUT_A2DP, RTAUDIO_DEVICE_STATE_UNAVAILABLE, "rtk_bt_a2dp", NULL);
+			g_a2dp_connect = false;
+		}
+
 		break;
 	}
 
@@ -1915,6 +1936,9 @@ audio_codec_conf.param_len = sizeof(aac_codec_t);
 					p_stream_open_t->bd_addr[5], p_stream_open_t->bd_addr[4], p_stream_open_t->bd_addr[3],
 					p_stream_open_t->bd_addr[2], p_stream_open_t->bd_addr[1], p_stream_open_t->bd_addr[0],
 					(int)p_stream_open_t->max_pkt_len);
+		if(a2dp_demo_role == RTK_BT_A2DP_ROLE_SRC) {
+		    g_a2dp_connect = true;
+		}
 	}
 	break;
 
@@ -2033,6 +2057,46 @@ static void a2dp_demo_reconnect_timer_handle(void *arg)
 	}
 }
 
+int get_channels_from_sbc_encoder(int channel_mode)
+{
+	int channels = 2;
+    switch (channel_mode)
+	{
+	case SBC_CHANNEL_MODE_MONO:
+		channels = 1;
+		break;
+	case SBC_CHANNEL_MODE_DUAL_CHANNEL:
+	    channels = 2;
+	    break;
+	case SBC_CHANNEL_MODE_STEREO:
+	    channels = 2;
+	    break;
+	case SBC_CHANNEL_MODE_JOINT_STEREO:
+	    channels = 2;
+	    break;
+
+	default:
+		break;
+	}
+
+    return channels;
+}
+
+int bt_a2dp_get_rate(void)
+{
+    return sbc_codec_t.encoder_t.sample_rate;
+}
+
+int bt_a2dp_get_format(void)
+{
+    return RTAUDIO_FORMAT_PCM_16_BIT;
+}
+
+int bt_a2dp_get_channels(void)
+{
+    return get_channels_from_sbc_encoder(sbc_codec_t.encoder_t.channel_mode);
+}
+
 /**
  * @brief  process a2dp main init/ deinit.
  * @param  enable[in]: 1: init. 0 deinit
@@ -2045,6 +2109,8 @@ int bt_a2dp_main(uint8_t role, uint8_t enable)
 	char addr_str[30] = {0};
 	char dev_name[30] = {0};
 
+	RTAudioService_Init();
+
 	if (1 == enable) {
 		if (a2dp_demo_init_flag) {
 			BT_LOGE("%s Already init! \r\n", __func__);
diff --git a/component/bluetooth/example/bt_atcmd/CMakeLists.txt b/component/bluetooth/example/bt_atcmd/CMakeLists.txt
index 817ab4c45d..08adac9f6e 100644
--- a/component/bluetooth/example/bt_atcmd/CMakeLists.txt
+++ b/component/bluetooth/example/bt_atcmd/CMakeLists.txt
@@ -100,6 +100,7 @@ ameba_list_append(private_includes
     ../gatt_service/client
     ../gatt_service/server
     ../ble_iso
+	${c_CMPT_AUDIO_DIR}/interfaces
 )
 
 # Component private part, user config end
diff --git a/component/bluetooth/example/bt_atcmd/atcmd_bt_a2dp.c b/component/bluetooth/example/bt_atcmd/atcmd_bt_a2dp.c
index 3f1f8dbc55..621dc48856 100644
--- a/component/bluetooth/example/bt_atcmd/atcmd_bt_a2dp.c
+++ b/component/bluetooth/example/bt_atcmd/atcmd_bt_a2dp.c
@@ -17,6 +17,12 @@
 #include <atcmd_bt_impl.h>
 #include <rtk_bt_br_gap.h>
 
+#include "audio/audio_type.h"
+#include "audio/audio_service.h"
+
+extern bool g_a2dp_connect;
+extern uint8_t a2dp_demo_role;
+
 static int atcmd_bt_a2dp_connect(int argc, char **argv)
 {
 	(void)argc;
@@ -51,6 +57,10 @@ static int atcmd_bt_a2dp_disconnect(int argc, char **argv)
 	return 0;
 }
 
+extern int bt_a2dp_get_rate(void);
+extern int bt_a2dp_get_format(void);
+extern int bt_a2dp_get_channels(void);
+
 static int atcmd_bt_a2dp_start(int argc, char **argv)
 {
 	(void)argc;
@@ -65,6 +75,15 @@ static int atcmd_bt_a2dp_start(int argc, char **argv)
 	rtk_bt_br_addr_to_str(bd_addr, addr_str, sizeof(addr_str));
 	BT_LOGA("A2DP starting to device %s ...\r\n", addr_str);
 
+	RTAudioDeviceConfig config;
+	config.rate = bt_a2dp_get_rate();
+	config.channels = bt_a2dp_get_channels();
+	config.format = bt_a2dp_get_format();
+
+	if(a2dp_demo_role == RTK_BT_A2DP_ROLE_SRC) {
+	    RTAudioService_SetDeviceState(RTDEVICE_OUT_A2DP, RTAUDIO_DEVICE_STATE_AVAILABLE, "rtk_bt_a2dp", &config);
+	}
+
 	return 0;
 }
 
@@ -85,11 +104,72 @@ static int atcmd_bt_a2dp_suspend(int argc, char **argv)
 	return 0;
 }
 
+extern int atcmd_br_gap_disconnect(int argc, char **argv);
+extern bool g_a2dp_timeout;
+
+void a2dp_pressure_test(void *param)
+{
+	(void) param;
+
+	char *sink_addr = "00e04c800ea8";
+    while(1) {
+
+		BT_LOGA("@@@@@Disconnect \r\n");
+        atcmd_br_gap_disconnect(1, &sink_addr);
+
+		while (g_a2dp_connect) {
+            rtos_time_delay_ms(500);
+		}
+		BT_LOGA("@@@@@Free heap:%d \r\n", rtos_mem_get_free_heap_size());
+
+		BT_LOGA("@@@@@Connect \r\n");
+		atcmd_bt_a2dp_connect(1, &sink_addr);
+
+        int32_t connect_wait_cnt = 0;
+		while (!g_a2dp_connect) {
+			if (g_a2dp_timeout) {
+				BT_LOGA("@@@@@RetryConnect \r\n");
+				atcmd_bt_a2dp_connect(1, &sink_addr);
+				g_a2dp_timeout = false;
+			}
+            rtos_time_delay_ms(1000);
+			connect_wait_cnt++;
+			if (connect_wait_cnt == 20) {
+				BT_LOGA("@@@@@WaitTimeout RetryConnect \r\n");
+				atcmd_bt_a2dp_connect(1, &sink_addr);
+				connect_wait_cnt = 0;
+			}
+		}
+		rtos_time_delay_ms(1500);
+
+		BT_LOGA("@@@@@Start \r\n");
+		atcmd_bt_a2dp_start(1, &sink_addr);
+
+        rtos_time_delay_ms(1500);
+
+	}
+
+	rtos_task_delete(NULL);
+}
+
+int atcmd_pressure_test(int argc, char **argv)
+{
+	(void) argc;
+	(void) argv;
+
+	if (rtos_task_create(NULL, ((const char *)"a2dp_pressure_test"), a2dp_pressure_test, NULL, 8192 * 6, 1) != RTK_SUCCESS) {
+		BT_LOGA("error: rtos_task_create(a2dp_pressure_test) failed");
+	}
+
+    return 0;
+}
+
 static const cmd_table_t a2dp_cmd_table[] = {
 	{"conn",       atcmd_bt_a2dp_connect,        2, 2},
 	{"disconn",    atcmd_bt_a2dp_disconnect,     2, 2},
 	{"start",      atcmd_bt_a2dp_start,          2, 2},
 	{"suspend",    atcmd_bt_a2dp_suspend,        2, 2},
+	{"pressure",   atcmd_pressure_test,          2, 2},
 	{NULL,},
 };
 
diff --git a/component/bluetooth/example/bt_atcmd/atcmd_bt_br_gap.c b/component/bluetooth/example/bt_atcmd/atcmd_bt_br_gap.c
index a533ccd52c..deeb1e60f2 100644
--- a/component/bluetooth/example/bt_atcmd/atcmd_bt_br_gap.c
+++ b/component/bluetooth/example/bt_atcmd/atcmd_bt_br_gap.c
@@ -82,7 +82,7 @@ static int atcmd_br_gap_set_security_param(int argc, char **argv)
 	return 0;
 }
 
-static int atcmd_br_gap_disconnect(int argc, char **argv)
+int atcmd_br_gap_disconnect(int argc, char **argv)
 {
 	(void)argc;
 	char addr_str[30] = {0};
